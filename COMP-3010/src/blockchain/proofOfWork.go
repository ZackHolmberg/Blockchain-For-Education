package blockchain

import (
	"crypto/sha256"
	"encoding/hex"
	"strconv"
)

// ============================ Proof of Work ============================

// ProofOfWork algorithm used in mining blocks
type ProofOfWork struct {
}

// ProofMethod is the interface method that calls this component's proof method
func (p ProofOfWork) ProofMethod() {
	proofOfWork()
}

// proofOfWork is the proof of work algorithm that
func proofOfWork() int {
	//TODO: Implement
	return 0
}

// ValidateProof verifies that the proof generated by this component's proof method is a valid proof
func (p ProofOfWork) ValidateProof() bool {
	//TODO: Implement
	return true
}

// CalculateHash is the interface method that caluclates a hash given some data
func (p ProofOfWork) CalculateHash(nonce int, block Block) string {
	record := strconv.Itoa(block.Index) + block.Timestamp + block.Data.ToString() + block.PrevHash
	h := sha256.New()
	h.Write([]byte(record))
	hashed := h.Sum(nil)
	return hex.EncodeToString(hashed)
}
